#
# .zshrc is sourced in interactive shells.
# It should contain commands to set up aliases,
# functions, options, key bindings, etc.
#
#  Not all terminals support this and, of those that do,
#  not all provide facilities to test the support, hence
#  the user should decide based on the terminal type.  Most
#  terminals  support the  colours  black,  red,  green,
#  yellow, blue, magenta, cyan and white, which can be set
#  by name.  In addition. default may be used to set the
#  terminal's default foreground colour.  Abbreviations
#  are allowed; b or bl selects black.
#
HISTFILE=~/.histfile
HISTSIZE=1000
SAVEHIST=1000

# This is a command that pipes all stderr to a red filter :)
# Compliments: http://skinwalker.wordpress.com/2012/01/24/stderr-zsh/
exec 2>>( while read X; do print "${ERROR_RED}${X}${NC}" > /dev/tty; done & )

# these substitutions seem to cause problems with tmux AND, with vi-mode seem unnecessary
# WORDCHARS="${WORDCHARS:s#/#}"
# WORDCHARS="${WORDCHARS:s#.#}"

### Setup computer type 
if [[ -f $HOME/.comptype ]] ; then
  COMP_TYPE=$(sed "1q;d" $HOME/.comptype)
else
  echo "*** Please run the setup.sh script in the dot file directory"
  echo "    things may not run smoothly until this is done. Thank you."
fi

# grab the paths
. $HOME/.path

# start gpg-agent
. $HOME/.gpg

# get extra source files
sources=("color" "keys" "completion" "profile" "alias" "prompt" "functions")
for file in $sources ; do
  . $HOME/.zsh/$file.zsh
done

#I want my umask 0002 if I'm not root
if [[ $(whoami) = root ]]; then
  umask 022
else
  umask 022
fi

# --- systems are go 
if [[ $TERM != dumb ]] ; then

  # now settup terminal multiplexer (the SSH_CONNECTION was originally meant to block the cellphone)
  if [[ ! -n $TMUX  && "$COMP_TYPE" != "central"  &&  ! -n $SSH_CONNECTION ]] ; then
    #if [[ ! -n $TMUX ]] && [[ "$COMP_TYPE" != "central" ]] ; then
    # This checks if tmux exists, and if it does, runs the startup script tmx
    {  hash tmux 2>&- && tmx $(hostname -s) ; } || echo >&2 "tmux did not startup on this machine (is it installed?) ..." 
  fi

  # are we connected through SSH?
  if [[ -n $SSH_CONNECTION ]] ; then 
    ssh_remote_string="${WHITE_BRIGHT} | ${RED}ssh: ${RED_BRIGHT}$(echo $SSH_CLIENT | awk '{print $1}' )"
  else
    ssh_remote_string=""
  fi

  # Welcome message:
  SIGNIN_DATE=$(date "+%Y年 %m月 %d日 （%a）%H:%M:%S")
  print -P "${HASH_MOD2}$(hostname -s): ${WHITE}${SIGNIN_DATE}${ssh_remote_string}${NC}"

  # check if port needs update (3 days outdated)
  if [[ "$COMP_TYPE" == "local" ]] ; then
    portupdateneeded 3
  fi

  # MacPorts autojump
  export FPATH="$FPATH:/opt/local/share/zsh/site-functions/"   
  if [ -f /opt/local/etc/profile.d/autojump.sh ]; then         
    . /opt/local/etc/profile.d/autojump.sh                   
  fi                                                           
  fpath=(~/.zsh/Completion $fpath)
fi

# setup ssh-agent on non-local machines
if [[ $COMP_TYPE != "local" ]] ; then

    SSH_ENV="$HOME/.ssh/environment"

    # start the ssh-agent
    function start_agent {
    echo "Initializing new SSH agent..."
    # spawn ssh-agent
    ssh-agent | sed 's/^echo/#echo/' > "$SSH_ENV"
    echo succeeded
    chmod 600 "$SSH_ENV"
    . "$SSH_ENV" > /dev/null
    ssh-add
  }

  # test for identities
  function test_identities {
  # test whether standard identities have been added to the agent already
  ssh-add -l | grep "The agent has no identities" > /dev/null
  if [ $? -eq 0 ]; then
    ssh-add
    # $SSH_AUTH_SOCK broken so we start a new proper agent
    if [ $? -eq 2 ];then
      start_agent
    fi
  fi
  }

  # check for running ssh-agent with proper $SSH_AGENT_PID
  if [ -n "$SSH_AGENT_PID" ]; then
    ps -ef | grep "$SSH_AGENT_PID" | grep ssh-agent > /dev/null
    if [ $? -eq 0 ]; then
      test_identities
    fi
    # if $SSH_AGENT_PID is not properly set, we might be able to load one from
    # $SSH_ENV
  else
    if [ -f "$SSH_ENV" ]; then
      . "$SSH_ENV" > /dev/null
    fi
    ps -ef | grep "$SSH_AGENT_PID" | grep -v grep | grep ssh-agent > /dev/null
    if [ $? -eq 0 ]; then
      test_identities
    else
      start_agent
    fi
    fi
fi

