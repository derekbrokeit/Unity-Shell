#!/usr/bin/env python

from subprocess import Popen, PIPE
from fabulous.color import green, yellow, blue, bold
import sys
import os

def get_branch(): #{{{1
    p = Popen("git rev-parse --abbrev-ref HEAD", shell=True, stdout=PIPE, stderr=PIPE)
    stdout, stderr = p.communicate()
    if p.returncode > 0:
        os.write(2, stderr)
        sys.exit()

    return stdout.rstrip()

def get_remote(): #{{{1
    p = Popen("git remote", shell=True, stdout=PIPE, stderr=PIPE)
    stdout, stderr = p.communicate()
    if p.returncode > 0:
        os.write(2, stderr)
        sys.exit()

    return stdout.splitlines()

def command_per_remote(cmd_line): #{{{1

    for i, remote in enumerate(get_remote()):
        try:
            temp = os.getenv( "DYLD_INSERT_LIBRARIES" )
            os.unsetenv("DYLD_INSERT_LIBRARIES")
        except KeyError:
            temp = None
        cmd = (cmd_line % remote)
        print "%d. %s" % (i, bold(blue(cmd)))
        p = Popen(cmd, shell=True, stdout=PIPE, stderr=PIPE)
        if temp:
            os.environ["DYLD_INSERT_LIBRARIES"] = temp
        stdout, stderr = p.communicate()
        os.write(2, stderr)
        os.write(1, stdout)

def evaluate_args(): #{{{1
    import argparse
    parser = argparse.ArgumentParser()
    parser.add_argument("-p","--pull", help="Run `git pull %s master` for all remote",
            action="store_true")
    parser.add_argument("-s","--sub_check", help="Run `git remote %s` update for each remote'",
            action="store_true")
    args = parser.parse_args()

    if args.pull:
        command_per_remote("git pull %s master")

    if args.sub_check:
        command_per_remote("git remote update %s")

if __name__ == "__main__": #{{{1
    branch = get_branch()
    if branch in ["master", "HEAD"]:
        color = green
    else:
        color = yellow

    print "Branch: " + bold(color(branch))
    print "-"*30
    evaluate_args()
    print
