#!/usr/bin/env python

from subprocess import Popen, PIPE
try:
    from fabulous.color import green, yellow, blue, bold
except ImportError:
    def return_to_sender(text): return text
    green  = return_to_sender
    yellow = return_to_sender
    blue   = return_to_sender
    bold   = return_to_sender
import sys
import os

def shell_quote(s):
    ''' Takes a string designed for shell-command and escapes it by
    surounding each word with single-quotes. Also, it attempts to escape
    single-quotes embedded in the string. '''
    return " ".join(["'"+p.replace("'", "'\\''")+"'" for p in s.split(" ")])

def test_shell_escape():
    cmd= shell_quote("echo hello ; fun.sh")
    print
    print "cmd:",cmd
    os.system(cmd)
    cmd=shell_quote("echo 'hello ; ' ; fun.sh")
    print
    print "cmd:",cmd
    os.system(cmd)

def get_branch(): #{{{1
    p = Popen("git rev-parse --abbrev-ref HEAD", shell=True, stdout=PIPE, stderr=PIPE)
    stdout, stderr = p.communicate()
    if p.returncode > 0:
        os.write(2, stderr)
        sys.exit()

    return stdout.rstrip()

def get_remote(): #{{{1
    p = Popen("git remote", shell=True, stdout=PIPE, stderr=PIPE)
    stdout, stderr = p.communicate()
    if p.returncode > 0:
        os.write(2, stderr)
        sys.exit()

    return stdout.splitlines()

def command_per_remote(cmd_line): #{{{1

    for i, remote in enumerate(get_remote()):
        cmd = (cmd_line % remote)
        esc_cmd = shell_quote(cmd) # safely escape each word in the command by surrounding it with single-quotes
        print "%d. %s" % (i, bold(blue(cmd)))
        #p = Popen(cmd, shell=True, stdout=PIPE, stderr=PIPE)
        #stdout, stderr = p.communicate()
        #os.write(2, stderr)
        #os.write(1, stdout)
        os.system(esc_cmd)

def evaluate_args(): #{{{1
    import argparse
    parser = argparse.ArgumentParser()
    parser.add_argument("--pull", help="Run `git pull %s master` for all remote",
            action="store_true")
    parser.add_argument("-s","--sub_check", help="Run `git remote %s` update for each remote'",
            action="store_true")
    parser.add_argument("--push", help="Run `git push %s master` for all remote",
            action="store_true")
    args = parser.parse_args()

    branch = get_branch()
    if branch in ["master", "HEAD"]:
        color = green
    else:
        color = yellow

    print "Branch: " + bold(color(branch))
    print "-"*30

    # check args
    if args.pull:
        command_per_remote("git pull %s master")

    if args.push:
        command_per_remote("git push %s master")

    if args.sub_check:
        command_per_remote("git remote update %s")
    

if __name__ == "__main__": #{{{1
    evaluate_args()
    print
