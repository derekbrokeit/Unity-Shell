import numpy as np
import re
import os
import matplotlib.pyplot as plt
import xonsh.tools as _xt

from datetime import datetime

$XONSH_SHOW_TRACEBACK = True

#################
# path {{{1
#################
$BASH_COMPLETIONS.append(r'/usr/local/etc/bash_completion.d')

# make sure that the path is in the correct order
$PATH.extend(['~/.local/bin', '~/bin'])
$PATH[:0] = [r'/usr/pgsql-10/bin']

$PATHEXT.extend(['.py'])

#$TITLE

# start powerline daemon
if not _xt.ON_WINDOWS:
    # because tmux is not available on windows, no reason to start the daemon
    powerline-daemon 2> /dev/null

# startup ssh-agent
nagents = len($(ps -ef | grep ssh-agent).splitlines()) - 1
if os.path.isfile($HOME + '/.ssh-agent') and nagents:
    source-bash ~/.ssh-agent &> /dev/null
else:
    ssh-agent > ~/.ssh-agent
    source-bash ~/.ssh-agent &> /dev/null
    ssh-add ~/.ssh/mis
    print("new ssh-agent started")
del nagents

#################
# profile variables {{{1
#################
if _xt.ON_WINDOWS:
    $EDITOR       = 'gvim'
else:
    $EDITOR       = 'vim'
if not _xt.ON_WINDOWS:
    $PAGER        = 'vimpager'
    $MANPAGER     = 'vimpager'

#################
# functions {{{1
#################
def _ignored_filetypes():
    return $(cat ~/.cvsignore).split()


def _tmx(args, stdin=None):
    tmux attach -d -t @(args[0]) or tmux new -s @(args[0])


def _now(args, stdin=None):
    # macro for getting the datetime in isoformat
    return datetime.now().isoformat()


def _moosesetup(args):
    if 'MODULE_VERSION' not in ${...}:
        $MODULE_VERSION_STACK = '3.2.10'
        $MODULE_VERSION = '3.2.10'
    else:
        $MODULE_VERSION_STACK = $MODULE_VERSION

    $MODULESHOME = '/opt/moose/Modules/3.2.10'

    if 'MODULEPATH' not in ${...}:
        f = open($MODULESHOME + "/init/.modulespath", "r")
        $MODULEPATH = []
        for line in f:
            line, _ = line.split('#', 1)
            if line:
                $MODULEPATH.append(line.strip())

    if 'LOADEDMODULES' not in ${...}:
        $LOADEDMODULES = ''
        
    def module(args):
        cmd = '/opt/moose/Modules/%s/bin/modulecmd' % $MODULE_VERSION
        @([cmd, 'python'] + args)

    aliases['module'] = module


#################
# aliases {{{1
#################
# moose
aliases['moosesetup'] = _moosesetup

# macros
aliases['now'] = _now
aliases['tmx'] = _tmx

# color grep
aliases['grep']  = 'grep --color=auto'
aliases['egrep'] = 'egrep --color=auto'
aliases['fgrep'] = 'fgrep --color=auto'

# text editors
aliases['v']   = '$EDITOR -O'
aliases['vi']  = '$EDITOR -O'
aliases['vgu'] = '$EDITOR -p $(git ls-files --other --exclude-standard)'
aliases['vgm'] = '$EDITOR -p $(git ls-files --modified --exclude-standard)'

# convenience functions
aliases['--']    = 'cd -'
aliases['rmi']   = 'rm -i '
aliases['cpi']   = 'cp -i '
aliases['grepi'] = 'grep -i '
aliases['tarz']  = 'tar cvzf '
aliases['utarz'] = 'tar xvf '
aliases['fsize'] = 'du -h '
aliases['htop']  = 'sudo htop'
aliases['less']  = '$PAGER'

# list aliases
aliases['ll'] = 'ls -l'
aliases['la'] = 'ls -la'

# download webpage and all children
aliases['wwwdown'] = [
        'wget ',
        '--wait=20',
        '--radnom-wait',
        '--limit-rate=20K',
        '--no-parent',
        '--recursive',
        '--page-requisites',
        '--html-extension',
        '--convert-links',
        ]

# tree
aliases['tree'] = 'tree -C -I @("|".join(_ignored_filetypes()))'

# git aliases
aliases['glu']    = 'git ls-files --other --exclude-standard'
aliases['glm']    = 'git ls-files --modified'
aliases['cdbase'] = 'cd $(git rev-parse --show-toplevel)'
aliases['g']      = 'git'
aliases['gst']    = 'git status'
aliases['gl']     = 'git pull'
aliases['gup']    = 'git fetch && git rebase'
aliases['gp']     = 'git push'
aliases['gc']     = 'git commit -v'
aliases['gca']    = 'git commit -v -a'
aliases['gco']    = 'git checkout'
aliases['gcm']    = 'git checkout master'
aliases['gb']     = 'git branch'
aliases['gba']    = 'git branch -a'
aliases['gcount'] = 'git shortlog -sn'
aliases['gcp']    = 'git cherry-pick'
aliases['glg']    = 'git log --stat --max-count=5'
aliases['glgg']   = 'git log --graph --max-count=5'
aliases['gss']    = 'git status -s'
aliases['ga']     = 'git add'
aliases['gm']     = 'git merge'
aliases['grh']    = 'git reset HEAD'
aliases['grhh']   = 'git reset HEAD --hard'

# tmux aliases
aliases['detach'] = 'tmux detach'

# python aliases
aliases['ipy']     = 'ipython'
aliases['py']      = 'python'
aliases['nb']      = 'jupyter-notebook'
aliases['pydserv'] = 'pydoc -p 9999'

# osx specific functions
#if _xt.ON_DARWIN:
#    aliases['battery']    = 'pmset -g'
#    aliases['remotelock'] = '/System/Library/CoreServices/Menu\ Extras/User.menu/Contents/Resources/CGSession -suspend'

#if 'nautilus' in os.ENVIRON:
#    aliases['open'] = 'nautilus'

# windows specific functions
if _xt.ON_WINDOWS:
    aliases['open'] = 'explorer'
#################
# prompt {{{1
#################
def _fmt_exitstatus():
    try:
        ret_code = __xonsh_history__.rtns[-1]
    except IndexError:
        # first command
        color = "{BOLD_INTENSE_GREEN}"
        ret_code = 0
    else:
        if ret_code == 0:
            color = "{BOLD_INTENSE_GREEN}"
        else:
            color = "{RED}"

    return "{color}{ret_code:03d}".format(color=color, ret_code=ret_code) + "{NO_COLOR}"


def _fmt_clock():
    return "{:%H:%M}".format(datetime.now())


def _fmt_date():
    return "{:%Y-%m-%d}".format(datetime.now())


def _fmt_gitstatus():
    # use a stored version of the gitstatus formatter in order to modify the result
    s = _gitstatus_()
    if s:
        return '{#999}(\uE0A0{NO_COLOR}' + s + '{#999}){NO_COLOR}'


_gitstatus_ = $PROMPT_FIELDS['gitstatus']
$PROMPT_FIELDS.update({
    'exitstatus': _fmt_exitstatus,
    'prompt_end': "#"*3 if _xt.is_superuser() else ">"*3,
    'prompt_color': "{BOLD_BLUE}" if _xt.is_superuser() else "{GREEN}",
    'gitstatus': _fmt_gitstatus,
    'clock' : _fmt_clock,
    'date': _fmt_date,
    })


del $PROMPT_FIELDS['branch_bg_color']
del $PROMPT_FIELDS['branch_color']
del $PROMPT_FIELDS['curr_branch']


$PROMPT = "\n{exitstatus} {YELLOW}{cwd} {gitstatus}{#FFF}{env_name}\n{#999}{clock} {prompt_color}{prompt_end}{NO_COLOR} "
$RIGHT_PROMPT = "\n{#999}{date}"


#################
# config setup {{{1
#################
$AUTO_CD = True
$AUTO_PUSHD = True
$AUTO_SUGGEST = True
$CASE_SENSITIVE_COMPLETIONS = False
$COLOR_INPUT = True
$COLOR_RESULTS = True
$COMPLETIONS_BRACKETS = True
$COMPLETIONS_CONFIRM = False
$COMPLETIONS_DISPLAY = "multi"
$COMPLETIONS_MENU_ROWS = 5
$DIRSTACK_SIZE = 20
$EXPAND_ENV_VARS = True
$FUZZY_PATH_COMPLETION = True
$GLOB_SORTED = True
$IGNOREEOF = False
$INDENT = "    "
$MOUSE_SUPPORT = False
$MULTILINE_PROMPT = "."
$PRETTY_PRINT_RESULTS = True
$PUSHD_MINUS = False
$PUSHD_SILENT = False
$RAISE_SUBPROC_ERROR = False
$SHELL_TYPE = "best"
$SUBSEQUENCE_PATH_COMPLETION = True
$SUGGEST_COMMANDS = True
$SUGGEST_MAX_NUM = 5
$SUGGEST_THRESHOLD = 3
$SUPPRESS_BRANCH_TIMEOUT_MESSAGE = False
$UPDATE_OS_ENVIRON = False
$VC_BRANCH_TIMEOUT = 0.1
$VI_MODE = True
$XONSH_CACHE_EVERYTHING = False
$XONSH_CACHE_SCRIPTS = True
$XONSH_DATETIME_FORMAT = "%Y-%m-%d %H:%M"
$XONSH_STORE_STDIN = False
$XONSH_STORE_STDOUT = True
$CDPATH = ["~/repo"]
$XONSH_COLOR_STYLE = "monokai"
$XONSH_GITSTATUS_AHEAD = "{WHITE}↑·"
$XONSH_GITSTATUS_BEHIND = "{WHITE}↓·"
$XONSH_GITSTATUS_BRANCH = "{INTENSE_PURPLE}"
$XONSH_GITSTATUS_CHANGED = "{YELLOW}+"
$XONSH_GITSTATUS_CLEAN = "{BOLD_INTENSE_GREEN}✓"
$XONSH_GITSTATUS_CONFLICTS = "{#ffa07a}×"
$XONSH_GITSTATUS_HASH = "{#CCC}:"
$XONSH_GITSTATUS_OPERATION = "{CYAN}"
$XONSH_GITSTATUS_STAGED = "{GREEN}●"
$XONSH_GITSTATUS_STASHED = "{CYAN}⚑"
$XONSH_GITSTATUS_UNTRACKED = "{INTENSE_RED}…"
$XONSH_SHOW_TRACEBACK = True

xontrib load mpl
xontrib load vox
