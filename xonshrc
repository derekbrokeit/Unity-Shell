import numpy as np
import re
import os
import matplotlib.pyplot as plt
import xonsh.tools as _xt

from datetime import datetime


#################
# path {{{1
#################
$BASH_COMPLETIONS.append(r'/usr/local/etc/bash_completion.d')

# make sure that the path is in the correct order
$PATH[:0] = [r'~/miniconda3/bin', r'/usr/local/bin', r'/usr/local/sbin', r'~/bin'] 
$PATH.extend([r'/opt/X11/bin', r'/usr/texbin'])

$PATHEXT.extend(['.py'])

#$TITLE

# start powerline daemon
powerline-daemon

#################
# profile variables {{{1
#################
$EDITOR       = 'vim'
$PAGER        = 'vimpager'
$MANPAGER     = 'vimpager'
$GREP_OPTIONS = '--color   = auto'
$GREP_COLOR   = '1;32'

#################
# functions {{{1
#################
def _ignored_filetypes():
    return $(cat ~/.cvsignore).split()


def _tmx(args, stdin=None):
    tmux attach -t @(args[0]) or tmux new -s @(args[0])


def _now(args, stdin=None):
    # macro for getting the datetime in isoformat
    return datetime.now().isoformat()


#################
# aliases {{{1
#################
# macros
aliases['now'] = _now
aliases['tmx'] = _tmx

# color grep
aliases['grep']  = 'grep --color  = auto'
aliases['egrep'] = 'egrep --color = auto'
aliases['fgrep'] = 'fgrep --color = auto'

# text editors
aliases['v']   = '$EDITOR -O'
aliases['vi']  = '$EDITOR -O'
aliases['vgu'] = 'vim -p $(git ls-files --other --exclude-standard)'
aliases['vgm'] = 'vim -p $(git ls-files --modified --exclude-standard)'

# convenience functions
aliases['--']    = 'cd -'
aliases['rmi']   = 'rm -i '
aliases['cpi']   = 'cp -i '
aliases['grepi'] = 'grep -i '
aliases['tarz']  = 'tar cvzf '
aliases['utarz'] = 'tar xvf '
aliases['fsize'] = 'du -h '
aliases['htop']  = 'sudo htop'
aliases['less']  = '$PAGER'

# list aliases
if _xt.ON_WINDOWS:
    aliases['ls'] = 'dir'
    aliases['pwd'] = 'echo $PWD'
else:
    aliases['ll'] = 'ls -l'
    aliases['la'] = 'ls -la'

# download webpage and all children
aliases['wwwdown'] = [
        'wget ',
        '--wait=20',
        '--radnom-wait',
        '--limit-rate=20K',
        '--no-parent',
        '--recursive',
        '--page-requisites',
        '--html-extension',
        '--convert-links',
        ]

# tree
aliases['tree'] = 'tree -C -I @("|".join(_ignored_filetypes()))'

# git aliases
aliases['glu']    = 'git ls-files --other --exclude-standard'
aliases['glm']    = 'git ls-files --modified'
aliases['cdbase'] = 'cd $(git rev-parse --show-toplevel)'
aliases['g']      = 'git'
aliases['gst']    = 'git status'
aliases['gl']     = 'git pull'
aliases['gup']    = 'git fetch && git rebase'
aliases['gp']     = 'git push'
aliases['gc']     = 'git commit -v'
aliases['gca']    = 'git commit -v -a'
aliases['gco']    = 'git checkout'
aliases['gcm']    = 'git checkout master'
aliases['gb']     = 'git branch'
aliases['gba']    = 'git branch -a'
aliases['gcount'] = 'git shortlog -sn'
aliases['gcp']    = 'git cherry-pick'
aliases['glg']    = 'git log --stat --max-count=5'
aliases['glgg']   = 'git log --graph --max-count=5'
aliases['gss']    = 'git status -s'
aliases['ga']     = 'git add'
aliases['gm']     = 'git merge'
aliases['grh']    = 'git reset HEAD'
aliases['grhh']   = 'git reset HEAD --hard'

# tmux aliases
aliases['detach'] = 'tmux detach'

# python aliases
aliases['ipy']     = 'ipython'
aliases['py']      = 'python'
aliases['nb']      = 'jupyter-notebook'
aliases['pydserv'] = 'pydoc -p 9999'

# osx specific functions
aliases['battery']    = 'pmset -g'
aliases['remotelock'] = '/System/Library/CoreServices/Menu\ Extras/User.menu/Contents/Resources/CGSession -suspend'

#################
# prompt {{{1
#################
def _fmt_exitstatus():
    try:
        ret_code = __xonsh_history__.rtns[-1]
    except IndexError:
        # first command
        color = "{BOLD_INTENSE_GREEN}"
        ret_code = 0
    else:
        if ret_code == 0:
            color = "{BOLD_INTENSE_GREEN}"
        else:
            color = "{RED}"

    return "{color}{ret_code:03d}".format(color=color, ret_code=ret_code) + "{NO_COLOR}"


def _fmt_clock():
    return "{:%H:%M}".format(datetime.now())


def _fmt_date():
    return "{:%Y-%m-%d}".format(datetime.now())


def _fmt_gitstatus():
    # use a stored version of the gitstatus formatter in order to modify the result
    s = _gitstatus_()
    if s:
        return '{#999}(\uE0A0{NO_COLOR}' + s + '{#999}){NO_COLOR}'


_gitstatus_ = $FORMATTER_DICT['gitstatus']
$FORMATTER_DICT.update({
    'exitstatus': _fmt_exitstatus,
    'prompt_end': "#"*3 if _xt.is_superuser() else ">"*3,
    'prompt_color': "{BOLD_BLUE}" if _xt.is_superuser() else "{GREEN}",
    'gitstatus': _fmt_gitstatus,
    'clock' : _fmt_clock,
    'date': _fmt_date,
    })


del $FORMATTER_DICT['branch_bg_color']
del $FORMATTER_DICT['branch_color']
del $FORMATTER_DICT['curr_branch']


$PROMPT = "\n{exitstatus} {YELLOW}{cwd} {gitstatus}\n{#999}{clock} {prompt_color}{prompt_end}{NO_COLOR} "
$RIGHT_PROMPT = "\n{#999}{date}"
