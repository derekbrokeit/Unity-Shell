import numpy as np
import re
import matplotlib.pyplot as plt
import xonsh.tools as _xt

from datetime import datetime


$BASH_COMPLETIONS.append(r'/usr/local/etc/bash_completion.d')

path_tmp = list($PATH)
$PATH = [r'~/miniconda3/bin', r'/usr/local/bin', r'/usr/local/sbin', r'~/bin'] 
$PATH.extend(path_tmp)
$PATH.extend([r'/opt/X11/bin', r'/usr/texbin'])
del path_tmp

$PATHEXT.extend(['.py'])

#$TITLE

def _now(args, stdin=None):
    return datetime.now().isoformat()


aliases['now'] = _now
aliases['g'] = 'git'
aliases['vi'] = 'vim'


def _fmt_exitstatus():
    try:
        ret_code = __xonsh_history__.rtns[-1]
    except IndexError:
        # first command
        color = "{BOLD_INTENSE_GREEN}"
        ret_code = 0
    else:
        if ret_code == 0:
            color = "{BOLD_INTENSE_CYAN}"
        else:
            color = "{RED}"

    return "{color}{ret_code:03d}".format(color=color, ret_code=ret_code) + "{NO_COLOR}"


def _fmt_clock():
    return "{:%H:%M}".format(datetime.now())


def _fmt_date():
    return "{:%Y-%m-%d}".format(datetime.now())


def _fmt_gitstatus():
    branch = $(git rev-parse --abbrev-ref HEAD e> /dev/null).replace('\n', '')
    if branch:
        tracker = $(git rev-list --left-right --boundary "@{u}...HEAD" e> /dev/null)
        nbehind = tracker.count('<')
        nahead  = tracker.count('>')
        
        if nahead > 0:
            branch += '{{WHITE}}↑{:d}'.format(nahead)
            if nbehind > 0:
                branch += '{{WHITE}}↓{:d}'.format(nbehind)
        elif nbehind > 0:
            branch += '{{WHITE}}↓{:d}'.format(nbehind)
        else:
            branch += '{INTENSE_CYAN}☰'

        gst    = $(git status --porcelain e> /dev/null)
        ntotal = len(gst.splitlines())

        if ntotal > 0:
            nunmer = len(re.findall('^(DD|AU|UD|UA|DU|AA|UU)', gst, flags=re.MULTILINE))
            nstage = len(re.findall('^\w', gst, flags=re.MULTILINE)) - nunmer
            nunstg = len(re.findall('^ \w', gst, flags=re.MULTILINE))
            nother = ntotal - (nstage + nunstg)
            #return nunmer, nstage, nunstg, nother

            st = ""
            for n, c, s in zip(
                    [nunmer, nstage, nunstg, nother], 
                    ['{#ffa07a}', '{GREEN}', '{YELLOW}', '{INTENSE_RED}'],
                    ['○', '●', '✚', '…']):
                if n > 0:
                    st += "{c}{n: 3d}{s}".format(c=c, n=n, s=s)
        else:
            st = '{GREEN}✔'

        return '{{#999}}(\uE0A0{{INTENSE_PURPLE}}{branch}{{#999}}|{st}{{#999}}){{NO_COLOR}}'.format(branch=branch, st=st)

    return branch


$FORMATTER_DICT.update({
    'exitstatus': _fmt_exitstatus,
    'prompt_end': "### " if _xt.is_superuser() else ">>> ",
    'prompt_color': "{BOLD_BLUE}" if _xt.is_superuser() else "{GREEN}",
    'gitstatus': _fmt_gitstatus,
    'clock' : _fmt_clock,
    'date': _fmt_date,
    })


del $FORMATTER_DICT['branch_bg_color']
del $FORMATTER_DICT['branch_color']
del $FORMATTER_DICT['curr_branch']


$PROMPT = "\n{exitstatus} {YELLOW}{cwd} {gitstatus}\n{#999}{clock} {prompt_color}{prompt_end}{NO_COLOR}"
$RIGHT_PROMPT = "\n{#999}{date}"


